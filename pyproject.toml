[tool.poetry]
name = "contextor"
version = "0.0.1"
description = "Converts existing documentation trees into Model Context Protocol (.mdc) files optimized for LLMs"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/your-org/contextor"
repository = "https://github.com/your-org/contextor"
documentation = "https://github.com/your-org/contextor/docs"
keywords = ["mcp", "documentation", "ai-agents", "content-extraction", "markdown", "mdx"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "contextor"}]

[tool.poetry.dependencies]
python = "^3.11"

# CLI framework
click = "^8.1.0"

# Markdown/MDX processing
markdown-it-py = "^3.0.0"
mdformat = "^0.7.17"
mdformat-gfm = "^0.3.5"
python-frontmatter = "^1.0.0"



# Utilities
python-dotenv = "^1.0.0"

# Logging
structlog = "^23.2.0"

# Optional serverless dependencies (for Phase 2)
boto3 = {version = "^1.34.0", optional = true}
starlette = {version = "^0.32.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.group.serverless.dependencies]
# AWS Lambda dependencies
boto3 = "^1.34.0"
awslambdaric = "^2.0.7"

[tool.poetry.group.vercel.dependencies]
# Vercel Edge Functions dependencies
starlette = "^0.32.0"

[tool.poetry.extras]
aws = ["boto3", "awslambdaric"]
vercel = ["starlette"]
all = ["boto3", "awslambdaric", "starlette"]

[tool.poetry.scripts]
contextor = "contextor.__main__:main"
contextor-server = "contextor.mcp_server.server:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "html2text.*",
    "diskcache.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["contextor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "contextor/serverless/*",  # Exclude serverless handlers from coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
